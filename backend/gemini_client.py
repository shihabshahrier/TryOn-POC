import os
import google.generativeai as genai
from dotenv import load_dotenv
from PIL import Image, ImageDraw, ImageFont
import io
import base64

# Load environment variables
load_dotenv()

class GeminiClient:
    def __init__(self):
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            raise ValueError("GEMINI_API_KEY environment variable is required")
        
        genai.configure(api_key=api_key)
        # Use Gemini 2.5 Flash Image Preview (Nano Banana) for virtual try-on generation
        self.model = genai.GenerativeModel('gemini-2.5-flash-image-preview')
    
    def generate_tryon_image(self, user_photo_path: str, product_photo_path: str, product_name: str) -> bytes:
        """
        Generate virtual try-on image using Gemini 2.5 Flash Image Preview (Nano Banana)
        
        Args:
            user_photo_path: Path to user's full-body photo
            product_photo_path: Path to product photo
            product_name: Name of the product for context
            
        Returns:
            bytes: Generated try-on image data
        """
        try:
            # Load images
            user_image = Image.open(user_photo_path)
            product_image = Image.open(product_photo_path)
            
            print(f"Generating virtual try-on for user photo: {user_photo_path}")
            print(f"Product photo: {product_photo_path}")
            print(f"Product name: {product_name}")
            
            # Create a detailed prompt for realistic virtual try-on using Nano Banana
            tryon_prompt = f"""Create a photorealistic virtual try-on image showing the person from the first image wearing the {product_name} from the second image.

CRITICAL REQUIREMENTS:
- Keep the person's face, skin tone, hair, and body exactly as they appear in the original photo
- Replace their current clothing with the {product_name}, ensuring it fits naturally on their body
- Maintain the original pose, background, and lighting conditions
- The clothing should drape and fit realistically according to the person's body shape and pose
- Preserve all natural shadows, highlights, and fabric textures
- Ensure the clothing appears to be actually worn, not just overlaid or floating

STYLE: Photorealistic, studio-quality virtual try-on
LIGHTING: Match the original photo's lighting conditions exactly
DETAILS: Pay attention to fabric draping, fit around the body, and natural clothing creases

Generate a single high-quality image showing the realistic virtual try-on result."""

            # Generate the try-on image using Gemini 2.5 Flash Image Preview (Nano Banana)
            print("Generating virtual try-on with Gemini 2.5 Flash Image Preview...")
            response = self.model.generate_content([tryon_prompt, user_image, product_image])
            
            # Extract the generated image from the response
            for part in response.candidates[0].content.parts:
                if part.inline_data is not None:
                    print("Successfully generated virtual try-on image")
                    return part.inline_data.data
                elif part.text is not None:
                    print(f"Generation response text: {part.text}")
            
            # If no image was generated, create an informative error image
            print("No image was generated by Nano Banana, creating error placeholder")
            error_image = self._create_error_image(f"Virtual try-on generation failed for {product_name}")
            return error_image
            
        except Exception as e:
            print(f"Error in virtual try-on generation: {str(e)}")
            # Create an error image with details
            error_image = self._create_error_image(f"Try-on failed: {str(e)}")
            return error_image

    def _create_error_image(self, message: str) -> bytes:
        """Create an error image when generation fails"""
        error_img = Image.new('RGB', (512, 512), color='white')
        draw = ImageDraw.Draw(error_img)
        
        try:
            font = ImageFont.load_default()
        except:
            font = None
        
        # Wrap text for better display
        lines = []
        words = message.split()
        line = ""
        for word in words:
            if len(line + word) < 40:
                line += word + " "
            else:
                lines.append(line.strip())
                line = word + " "
        if line:
            lines.append(line.strip())
        
        # Draw text centered
        y_offset = 200
        for line in lines:
            bbox = draw.textbbox((0, 0), line, font=font)
            x = (512 - (bbox[2] - bbox[0])) // 2
            draw.text((x, y_offset), line, fill='red', font=font)
            y_offset += 30
        
        # Convert to bytes
        img_byte_arr = io.BytesIO()
        error_img.save(img_byte_arr, format='PNG')
        return img_byte_arr.getvalue()
    
    def test_connection(self) -> bool:
        """Test if Gemini API is working"""
        try:
            # Test with a simple text generation request (compatible with all models)
            response = self.model.generate_content("Say 'API test successful'")
            return bool(response and response.text)
        except Exception as e:
            print(f"Gemini API test failed: {str(e)}")
            return False

